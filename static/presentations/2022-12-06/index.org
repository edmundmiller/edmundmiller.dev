#+title: nf-test

* What is nf-test
- "Ability to write unit tests for Nextflow workflows"
    - The second most requested feature(weighted) in this years nextflow and nf-core community survey
- pytest/unittest but for Nextflow

* Hello nf-test
#+begin_src nextflow
#!/usr/bin/env nextflow
nextflow.enable.dsl=2

process sayHello {
  input:
    val x
  output:
    stdout
  script:
    """
    echo '$x world!'
    """
}

workflow {
  Channel.of('Bonjour', 'Ciao', 'Hello', 'Hola') | sayHello | view
}
#+end_src
* Hello nf-test
#+begin_src nextflow
nextflow_pipeline {

  name "Test Hello World"
  script "nextflow-io/hello"

  test("hello world example should start 4 processes") {

    expect {
      with(workflow){
        assert success
        //analyze Nextflow trace file
        assert trace.tasks().size() == 4
        //Verify if strings have been written to stdout object
        assert "Ciao world!" in stdout
        assert "Bonjour world!" in stdout
        assert "Hello world!" in stdout
        assert "Hola world!" in stdout
      }
    }
  }
}
#+end_src
* Why do we want it?
** Testing practices until now
- Pipelines - GitHub Actions
- Modules - Pytest-workflow
** Pipelines - GitHub Actions
- "CI is meant to run your test framework, not be your test framework"
- Just checks that the workflows don't fail
- As the number of tests gets higher, it becomes more difficult to maintain.
  - Sarek for example was motivated to adopt pytest-workflow
- Running tests locally meant digging into the CI to find what all is being ran.
  - Heavy reliance on CI runners(CI runners should settle "runs on my computer")
** Modules - Pytest-workflow
- Running your tests should be as easy as running your pipeline
  - pytest-workflow was not, enter ~nf-core modules test~
- No native support for Nextflow profiles(docker, singularity, conda)
- Pipeline output was tough to find locally
** So why were we putting off pytest-workflow for pipelines?
- Started a PR in December 2020
- Got around to getting it to work for rnaseq at the Hackathon in October 2022
  - We started playing around with nf-test at the Hackathon
- A lot of manual work to get all md5sums of files(See Sarek)
  - Manually writing our own mocks for subworkflows and local modules
* Intro to nf-test
#+begin_src bash
curl -fsSL https://code.askimed.com/install/nf-test | bash
nf-test init
nf-test generate pipeline main.nf
nf-test generate workflow subworkflows/local/*.nf
nf-test generate process modules/local/*.nf
nf-test generate function lib/*
# After writing them
nf-test test
#+end_src

- https://code.askimed.com/nf-test/getting-started/

* Intro to nf-test
Quick code walkthrough
https://github.com/nf-core/demultiplex/blob/dev/tests/pipeline/default/bases2fastq.nf.test
* Good Testing Practices
- Quality Assurance (QA)
- CI/CD
- Test-Driven Development (TDD)
- Behavioral-Driven Development (BDD)
- Just Kidding (JK)
* +Good+ Realistic Testing +Practices+ Priorities
1. Convert CI tests to "pipeline" tests
2. Add more pipeline tests for params/pathways you want to make sure don't break
3. Add tests when fixing bugs
4. Test your local modules

TL;DR Avoid Regressions, stand on the shoulders of nf-core module tests

* Roll out plan
https://hackmd.io/@nf-core/B15sVq5So?type=view
- Pipelines as a proving ground(It's already in methylseq & demultiplex!)
- Update template
- Module infrastructure prep
- Update modules as they get changes
- Final push to convert all the modules at a hackathon