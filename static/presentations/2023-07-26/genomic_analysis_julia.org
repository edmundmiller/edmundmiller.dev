-*-  org-babel-julia-command: "julia --project=."; -*-
#+title: Unlocking the Power of Genomic Analysis in Julia
#+author: Edmund Miller
#+date: July 26th, 2023

#+language: en
#+startup: content

#+latex_class_options: [aspectratio=32]
# #+beamer_theme: chameleon
#+beamer_theme: [progressbar=foot]metropolis
#+options: num:nil
#+options: toc:nil
#+startup: inlineimages
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+beamer_frame_level: 2
# SPC m e l O

# https://pretalx.com/juliacon2023/me/submissions/AJJRS3/

* Abstract :noexport:

Learn how Julia, a high-performance programming language, can be used to analyze genomic data. Discussion of libraries, specific challenges and opportunities, past examples, and future possibilities of using Julia in genomic data analysis.

* Description :noexport:

Genomic data is becoming an increasingly valuable resource in the study of biology and medicine, as it allows for a deeper understanding of the underlying mechanisms of diseases and the development of more effective therapies. However, the sheer volume and complexity of genomic data can make it challenging to analyze. Julia, a high-performance programming language, has emerged as a powerful tool for genomic data analysis. In this talk, we will explore the use of Julia for genomic data analysis, including the various libraries and packages available, such as IntervalTrees and GenomicFeatures. We will also discuss some of the specific challenges and opportunities that arise when analyzing genomic data, such as dealing with large-scale data and integrating multiple data types. We will also show some examples of how Julia has been used in the past to analyze genomic data and what the future holds for this field. This talk will be beneficial for biologists, bioinformaticians, and data scientists interested in the application of Julia to genomic data analysis.

Expected Outcomes:

- Understanding of the power and capabilities of Julia for genomic data analysis
- Knowledge of the available libraries and packages for genomic data analysis in Julia
- Insights into the challenges and opportunities of using Julia for genomic data analysis
- Familiarity with examples of how Julia has been used in the past for genomic data analysis
- Ideas for potential future applications of Julia in genomic data analysis.


* TODO Why? :noexport:
** Why are biologists working in Genomics interested?
** Why are Julia enthusiasts interested in Genomics?

* Overview
** Why Julia?
** Popular packages
* Juliaup
#+begin_src bash
curl -fsSL https://install.julialang.org | sh
#+end_src
* Package comparisons
:LOGBOOK:
CLOCK: [2023-07-15 Sat 21:30]--[2023-07-15 Sat 22:27] =>  0:57
CLOCK: [2023-07-15 Sat 14:17]--[2023-07-15 Sat 14:47] =>  0:30
:END:

# FIXME Split this into a slide for genomic file formats, general utilities, and genomic analysis

| Purpose                       | Python                                                              | R                                                            | Julia                                                                                                                                                              |
|-------------------------------+---------------------------------------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|                               | [[https://github.com/pyranges/pyranges][pyranges]] /[[https://daler.github.io/pybedtools/][pybedtools documentation — pybedtools 0.9.0 documentation]] | [[https://bioconductor.org/packages/release/bioc/html/rtracklayer.html][rtracklayer]]                                                  | [[https://docs.juliahub.com/GenomicFeatures/kSGNI/3.0.0/][GenomicFeatures.jl]]                                                                                                                                                 |
|                               |                                                                     | [[https://bioconductor.org/packages/release/bioc/vignettes/GenomicRanges/inst/doc/GenomicRangesIntroduction.html][GenomicsRanges]]                                               | [[https://biojulia.dev/GenomicFeatures.jl/stable/man/intervals/][Intervals · GenomicFeatures.jl]]                                                                                                                                     |
|                               |                                                                     | [[https://github.com/drostlab/metablastr][GitHub - drostlab/metablastr: BLAST Sequence Searches with R]] | [[https://docs.juliahub.com/BioTools/wwbVn/1.1.0/blast/][BioTools.jl]]                                                                                                                                                        |
|                               | [[https://biopython.org/wiki/SeqIO][Bio.SeqIO]]                                                           |                                                              | [[https://biojulia.dev/BioSequences.jl/stable/transforms/][Indexing & modifying sequences · BioSequences.jl]]                                                                                                                   |
| Genomic Data Retrieval with R | [[https://github.com/pyranges/pyranges_db][pyranges_db]]/[[https://github.com/sebriois/biomart][biomart]] (api)                                           | [[https://github.com/ropensci/biomartr][biomartr]]                                                     | [[https://docs.juliahub.com/BioServices/nOcmO/0.4.1/man/eutils/][EUtils · BioServices.jl]] / [[https://github.com/BioJulia/BioFetch.jl][GitHub - BioJulia/BioFetch.jl: Easily fetch biological sequences from online ...]]                                                                                                                                         |
| Plotting                      | Matplotlib                                                          | ggplot2                                                      |[[https://github.com/JuliaPy/PyPlot.jl][GitHub - JuliaPy/PyPlot.jl: Plotting for Julia based on matplotlib.pyplot]] /[[https://github.com/MakieOrg/Makie.jl][GitHub - MakieOrg/Makie.jl: Visualizations and plotting in Julia]] / [[https://gadflyjl.org/stable/][Home · Gadfly.jl]]                                                                               |
| Dataframes                    | Pandas/Polars                                                       | [[https://tibble.tidyverse.org/][tibble]]                                                       |                                                                                                                                                                    |
|                               |                                                                     |                                                              |                                                                                                                                                                    |
| Read Sam/Bam files            | [[https://biopython.org/wiki/SeqIO][Bio.SeqIO]]                                                           |                                                              | [[https://docs.juliahub.com/XAM/4JnDO/0.3.1/][Readme · XAM.jl]]                                                                                                                                                    |
| Reading Fastq files           |                                                                     |                                                              | [[https://github.com/BioJulia/FASTX.jl][GitHub - BioJulia/FASTX.jl: Parse and process FASTA and FASTQ formatted files...]]                                                                                   |
| Genomic Annotations           |                                                                     |                                                              | [[https://docs.juliahub.com/GenomicAnnotations/ckOyU/0.3.2/][GenomicAnnotations.jl · GenomicAnnotations.jl]]                                                                                                                      |
| Population Genetics           | [[https://biopython.org/wiki/PopGen][Population Genetics in Biopython · Biopython]]                        |                                                              | [[https://github.com/BioJulia/PopGen.jl][GitHub - BioJulia/PopGen.jl: Population Genetics in Julia]]                                                                                                          |
| Variants/vcf                  |                                                                     |                                                              | [[https://github.com/BioJulia/GeneticVariation.jl][GitHub - BioJulia/GeneticVariation.jl: Datastructures and algorithms for work...]] /[[https://github.com/rasmushenningsson/VariantCallFormat.jl][GitHub - rasmushenningsson/VariantCallFormat.jl: Read and write VCF and BCF f...]] |
|                               |                                                                     |                                                              | [[https://biojulia.dev/Phylogenies.jl/stable/][Phylogenies.jl]]                                                                                                                                                     |
|                               | [[https://biopython.org/wiki/The_Biopython_Structural_Bioinformatics_FAQ][Bio.PDB]]                                                             |                                                              | [[https://biojulia.dev/BioStructures.jl/stable/][Home · BioStructures.jl]]                                                                                                                                            |
|                               |                                                                     |                                                              | [[https://github.com/BioJulia/GFF3.jl][GitHub - BioJulia/GFF3.jl]]                                                                                                                                          |

** :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:

- Gadfly - if you prefer Grammer of graphics

https://www.bioconductor.org/packages/stats/

* TODO [[https://github.com/BioJulia/BioTutorials][GitHub - BioJulia/BioTutorials: Tutorial Notebooks of BioJulia]] :noexport:
* What about when you can't replace popular packages?


- DESeq2

** Options
- [[https://github.com/JuliaInterop][JuliaInterop · GitHub]]
  - [[https://juliainterop.github.io/RCall.jl/stable/gettingstarted/][RCall.jl]]
  - [[https://github.com/JuliaPy/PyCall.jl][PyCall.jl]]

- Calling commandline tools from Julia

*** :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:

- Also libraries for C/C++, Matlab and GNU Octave, Java, Fortran
- There is a Rust crate but it doesn't seem very active. Probably because Julia
  came out in 2009, and Rust in 2015, so why would you reach for Rust if you're
  going to write Julia anyways.

* Calling commandline tools from Julia

#+begin_src julia
julia> mycommand = `echo hello`
`echo hello`

julia> typeof(mycommand)
Cmd

julia> run(mycommand);
hello
#+end_src

- [[https://docs.julialang.org/en/v1/manual/running-external-programs/][Docs on Running External Programs]]
* Calling commandline tools from Julia
#+begin_src julia
julia> files = ["/etc/passwd","/Volumes/External HD/data.csv"]
2-element Vector{String}:
 "/etc/passwd"
 "/Volumes/External HD/data.csv"

julia> `grep foo $files`
`grep foo /etc/passwd '/Volumes/External HD/data.csv'`
#+end_src

* Managing conda envs in Julia

#+begin_src julia
using Conda, RCall

Conda.add("bioconductor-deseq2", channel="bioconda", :rnaseq)

#+end_src

~ENV["CONDA_JL_USE_MINIFORGE"] = "1"~
# julia> using Conda
# julia> Conda.add("mamba")
# julia> ENV["CONDA_JL_CONDA_EXE"] = joinpath(Conda.ROOTENV, "bin", "mamba")
# pkg> build Conda
* Running Julia in Snakemake

#+begin_src snakemake
from snakemake.remote import AUTO
iris = "https://raw.githubusercontent.com/scikit-learn/scikit-learn/1.0/sklearn/datasets/data/iris.csv"
rule calling_script:
    input:
        AUTO.remote(iris)
    output:
        "results/out.csv",
    container: "docker://julia"
    script:
        "bin/smk_script.jl"
#+end_src

#+begin_quote
In the Julia script, a snakemake object is available, which can be accessed
similar to the Python case, with the only difference that you have to index from
1 instead of 0.
#+end_quote

** Inside the julia script

#+begin_src julia
import Pkg; Pkg.add(["CSV", "DataFrames"])

using CSV, DataFrames

df = DataFrame(CSV.File(snakemake.input[1], footerskip=50))
names(df)
CSV.write(snakemake.output[1], df)

do_something(snakemake.input[1], snakemake.output[2], snakemake.threads, snakemake.config["myparam"])
#+end_src

** TODO Handling package installs :noexport:
https://github.com/snakemake/snakemake/issues/2215
* Running Julia in Nextflow

** Installing Packages to Julia Depot

[[https://apeltzer.github.io/post/03-julia-lang-nextflow/][Julia Lang, Docker & Nextflow | Personal Homepage of Alex Peltzer]]

#+begin_src nextflow
// nextflow.config
env {
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}
#+end_src


** The script

#+begin_src nextflow
process cli {
    container 'julia'

    input:
    path csv_file

    output:
    stdout

    """
    julia hello.jl $csv_file
    """
}

process shebang {
    container 'julia'
    beforeScript "julia -e 'using Pkg; Pkg.activate("."); Pkg.add(["HTTP", "DataFrames"]); Pkg.precompile();'"

    input:
    path csv_file

    output:
    path "out.csv"

    """
    #!/usr/bin/env -S julia --startup-file=no

    using CSV, DataFrames

    df = DataFrame(CSV.File($csv_file, footerskip=50))
    names(df)
    CSV.write("out.csv", df)
    """
}

workflow {
    cli(file('./test.csv'))
    shebang(file('./test.csv'))
}
#+end_src

#+begin_src julia
#!/usr/bin/env -S julia --color=yes --startup-file=no

println(PROGRAM_FILE);
abspath(PROGRAM_FILE) == @__FILE__

@show ARGS

for x in ARGS
    println(x)
end
#+end_src

- Move it to the ~bin/~ folder of the pipeline, and make it executable (~chmod +x bin\*.jl~)


** :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:

- The ~--project=@.~ is the default
- But the way Nextflow works that doesn't get picked up
** TODO Handling package installs :noexport:

https://github.com/JuliaContainerization/SimpleContainerGenerator.jl

* Plotting
** BedGraphs
#+begin_src julia :using DataFrames FileIO
using FileIO, BedgraphFiles, DataTables, IndexedTables, Gadfly

# Load into a DataTable
dt = DataTable(load("data.bedgraph"))

# Load into an IndexedTable
it = IndexedTable(load("data.bedgraph"))
# Plot directly with Gadfly
plot(load("data.bedgraph"), xmin=:leftposition, xmax=:rightposition, y=:value, Geom.bar)
#+end_src

#+RESULTS:

# load("data.bedgraph") |> @filter(_.chrom == "chr19") |> save("data-chr19.bedgraph")
* TODO REPL driven development
* Other ideas to mimic
** Look at genomicranges example workflow.
** Crazy hot Tommy's blogs
** Other genomic R package demos?
* DataToolkit
# TODO Link to Teco's presentation
* Easy Package Creation
https://github.com/JuliaCI/PkgTemplates.jl
* Where is Julia lacking?

- Creating binaries/clis
