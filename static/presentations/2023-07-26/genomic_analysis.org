#+title: Unlocking the Power of Genomic Analysis in Julia
#+author: Edmund Miller
#+language: en
#+date: July 26th, 2023
#+exclude_tags: noexport
#+options: num:nil
#+options: toc:nil
#+startup: inlineimages
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+beamer_frame_level: 2
# SPC m e l O

# https://pretalx.com/juliacon2023/me/submissions/AJJRS3/

* Abstract :noexport:

Learn how Julia, a high-performance programming language, can be used to analyze genomic data. Discussion of libraries, specific challenges and opportunities, past examples, and future possibilities of using Julia in genomic data analysis.

* Description :noexport:

Genomic data is becoming an increasingly valuable resource in the study of biology and medicine, as it allows for a deeper understanding of the underlying mechanisms of diseases and the development of more effective therapies. However, the sheer volume and complexity of genomic data can make it challenging to analyze. Julia, a high-performance programming language, has emerged as a powerful tool for genomic data analysis. In this talk, we will explore the use of Julia for genomic data analysis, including the various libraries and packages available, such as IntervalTrees and GenomicFeatures. We will also discuss some of the specific challenges and opportunities that arise when analyzing genomic data, such as dealing with large-scale data and integrating multiple data types. We will also show some examples of how Julia has been used in the past to analyze genomic data and what the future holds for this field. This talk will be beneficial for biologists, bioinformaticians, and data scientists interested in the application of Julia to genomic data analysis.

Expected Outcomes:

- Understanding of the power and capabilities of Julia for genomic data analysis
- Knowledge of the available libraries and packages for genomic data analysis in Julia
- Insights into the challenges and opportunities of using Julia for genomic data analysis
- Familiarity with examples of how Julia has been used in the past for genomic data analysis
- Ideas for potential future applications of Julia in genomic data analysis.


* Juliaup
#+begin_src bash
curl -fsSL https://install.julialang.org | sh
#+end_src
* Replacing popular packages
genomic regions
*
* What about when you can't replace popular packages?

- DESeq2
* Calling commandline tools from Julia
* Managing conda envs in Julia
* Running Julia in Snakemake

#+begin_src snakemake
rule NAME:
    input:
        "path/to/inputfile",
        "path/to/other/inputfile"
    output:
        "path/to/outputfile",
        "path/to/another/outputfile"
    script:
        "path/to/script.jl"
#+end_src

#+begin_quote
In the Julia script, a snakemake object is available, which can be accessed
similar to the Python case, with the only difference that you have to index from
1 instead of 0.
#+end_quote

** Inside the julia script

#+begin_src julia
do_something(snakemake.input[1], snakemake.output[2], snakemake.threads, snakemake.config["myparam"])
#+end_src

** TODO Handling package installs
https://github.com/snakemake/snakemake/issues/2215
* Running Julia in Nextflow

** Installing Packages
[[https://apeltzer.github.io/post/03-julia-lang-nextflow/][Julia Lang, Docker & Nextflow | Personal Homepage of Alex Peltzer]]

#+begin_src nextflow
// nextflow.config
env {
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}
#+end_src


** The script

#+begin_src nextflow
process cli {
    container 'julia'
    beforeScript "julia -e 'using Pkg; Pkg.activate("."); Pkg.add(["HTTP", "DataFrames"]);'"
    input:
    path csv_file


    """
    julia $csv_file
    """
}

process shebang {
    container 'julia'
    beforeScript "julia -e 'using Pkg; Pkg.activate("."); Pkg.add(["HTTP", "DataFrames"]);'"
    input:
    path csv_file


    """
    julia $csv_file
    """
}
#+end_src

#+begin_src julia

#+end_src

- Move it to the ~bin/~ folder of the pipeline, and make it executable (~chmod +x bin\*.jl~)


* TODO Handling package installs

https://github.com/JuliaContainerization/SimpleContainerGenerator.jl

* Plotting
[[https://dash.plotly.com/julia/dash-bio/igv][Igv | Dash for Julia Documentation | Plotly]]
* Popular packages that are already written?
* REPL driven development
* Other ideas to mimic
** Look at genomicranges example workflow.
** Crazy hot Tommy's blogs
** Other genomic R package demos?
