#+title: Unlocking the Power of Genomic Analysis in Julia
#+setupfile: ../setup.org

# https://pretalx.com/juliacon2023/me/submissions/AJJRS3/
# This talk is for the person who wandered into the room, not the experts

* PROJ Tracking :noexport:
- [ ] Fix backticks being quotes
- [ ] Reattach R call graph

* Abstract :noexport:

Learn how Julia, a high-performance programming language, can be used to analyze
genomic data. Discussion of libraries, specific challenges and opportunities,
past examples, and future possibilities of using Julia in genomic data analysis.

* Description :noexport:

Genomic data is becoming an increasingly valuable resource in the study of
biology and medicine, as it allows for a deeper understanding of the underlying
mechanisms of diseases and the development of more effective therapies. However,
the sheer volume and complexity of genomic data can make it challenging to
analyze. Julia, a high-performance programming language, has emerged as a
powerful tool for genomic data analysis. In this talk, we will explore the use
of Julia for genomic data analysis, including the various libraries and packages
available, such as IntervalTrees and GenomicFeatures. We will also discuss some
of the specific challenges and opportunities that arise when analyzing genomic
data, such as dealing with large-scale data and integrating multiple data types.
We will also show some examples of how Julia has been used in the past to
analyze genomic data and what the future holds for this field. This talk will be
beneficial for biologists, bioinformaticians, and data scientists interested in
the application of Julia to genomic data analysis.

Expected Outcomes:

- Understanding of the power and capabilities of Julia for genomic data analysis
- Knowledge of the available libraries and packages for genomic data analysis in
  Julia
- Insights into the challenges and opportunities of using Julia for genomic data
  analysis
- Familiarity with examples of how Julia has been used in the past for genomic
  data analysis
- Ideas for potential future applications of Julia in genomic data analysis.

* Overview
** About Me

- Phd Candidate @ University of Texas at Dallas
- nf-core maintainer
[[https://raw.githubusercontent.com/nf-core/logos/master/nf-core-logos/nf-core-logo.svg]]
** Why should biologists working in Genomics be interested in Julia?

- "Why We Created Julia"[fn:1:https://julialang.org/blog/2012/02/why-we-created-julia]
  - As easy for statistics as R
  - With mathematical notation like Matlab
  - As usable for general programming as Python
  - As natural for string processing as Perl
  - As good at gluing programs together as the shell
  - As fast as C

- Reproducibility

** Why should Julia enthusiasts interested in Genomics?

- Interest in keeping costs low through more efficient computation
  - Cost of Whole Genome Sequencing: ~$100-1000
  - Cost of computational Analysis: ~$25
#+attr_latex: :width 0.65\linewidth
[[https://www.genome.gov/sites/default/files/inline-images/2022_Sequencing_cost_per_Human_Genome.jpg]]
# [fn:2:https://www.genome.gov/about-genomics/fact-sheets/DNA-Sequencing-Costs-Data]

*** :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:

- Rapid lowering cost of sequencing cost
- Smaller computers needed that run in less time

** Overview

- Julia Features for Analysis
- Ecosystem
- Julia in Workflows

* Julia Features for Analysis
** Juliaup

#+begin_src bash
curl -fsSL https://install.julialang.org | sh
#+end_src

- Cross-platform installer
- Install specific Julia versions
- Stay up to date with release channels (Stable, LTS)

** Package management - Pkg.jl
# TODO Can I make these biology related?
#+begin_src julia
# ]
(@v1.8) pkg>
(@v1.8) pkg> add Example
Resolving package versions...
Installed Example ─ v0.5.3
    Updating `~/.julia/environments/v1.8/Project.toml`
[7876af07] + Example v0.5.3
    Updating `~/.julia/environments/v1.8/Manifest.toml`
[7876af07] + Example v0.5.3
julia> import Example

julia> Example.hello("friend")
"Hello, friend"
#+end_src

** Pkg.jl Environments

#+begin_src julia
(@v1.8) pkg> activate rnaseq-analysis
[ Info: activating new environment at `~/rnseq-analysis/Project.toml`.
(rnaseq-analysis) pkg>
(rnaseq-analysis) pkg> status
    Status `~/rnseq-analysis/Project.toml`
(empty environment)
(rnaseq-analysis) pkg> add GFF3 GenomicFeatures
...
(rnaseq-analysis) pkg> status
  Status `~/rnaseq-analysis/Project.toml`
  [af1dc308] GFF3 v0.2.3
^ [899a7d2d] GenomicFeatures v2.1.0
#+end_src

** Want to hack on a project?

#+begin_src julia
pkg> develop --local Bed
#+end_src

There's a full clone at ~dev/Bed~!

** Other niceties

- [[https://github.com/JuliaCI/PkgTemplates.jl][PkgTemplates.jl]] - Easy Package Creation
- [[https://www.youtube.com/live/bHLXEUt5KLc?feature=share][Julia REPL Mastery Workshop]]
- VS Code - Batteries included environment

** DataToolkit

[[https://github.com/tecosaur/DataToolkit.jl/raw/main/docs/src/assets/logotype.svg]]

** DataToolkit - Example declarative data set

\small
#+begin_src conf-data-toml
[[HNSC_Phenotypes]]
uuid = "c2f8275e-f5b7-46f5-a95c-af3835573258"
description = "TCGA Head and Neck Cancer (HNSC) RNA-seq data"

    [[HNSC_Phenotypes.storage]]
    driver = "web"
    checksum = "crc32c:d5c06b86"
    url = "https://tcga-xena-hub.s3.us-east-1.amazonaws.com/download/TCGA.HNSC.sampleMap%2FHNSC_clinicalMatrix"
#+end_src

** DataToolkit - Example declarative data set

#+begin_src conf-data-toml
    [[HNSC_Phenotypes.loader]]
    driver = "csv"
    type = "DataFrame"

        [HNSC_Phenotypes.loader.args]
        delim = "\t"
        header = 1
        select = ["sampleID", "sample_type"]
        types = "String"
#+end_src

** DataToolkit - Features in this example

+ A named dataset @@latex:\hfill@@
  src_conf-data-toml{[[iris]]}
+ Which can be uniquely identified @@latex:\hfill@@
  src_conf-data-toml{uuid = "..."}
+ With metadata @@latex:\hfill@@
  src_conf-data-toml{description = "..."}
+ Named storage/loader backends @@latex:\hfill@@
  src_conf-data-toml{driver = "web"}
+ Content verification @@latex:\hfill@@
  src_conf-data-toml{checksum = "crc32c:d5c06b86"}
+ Storage/loader arguments @@latex:\hfill@@
  src_conf-data-toml{url = "..."}, src_conf-data-toml{args.header = 1}

** DataToolkit - Using a dataset in computation

#+beamer: \pause

#+begin_src julia
julia> using DataToolkit, DataFrames

julia> mean(d"HNSC_Phenotypes::Matrix", dims=1)
1×5 Matrix{Float64}:
 5.84333  3.05733  3.758  1.19933  1.0
#+end_src

#+beamer: \pause

More than just string matching for types:

#+begin_src julia
julia> mean(d"HNSC_Phenotypes::Array{T<:Any, 2}", dims=1)
1×5 Matrix{Float64}:
 5.84333  3.05733  3.758  1.19933  1.0
#+end_src

** DataToolkit - Want to learn more?
#+attr_latex: :width 0.7\linewidth
[[https://github.com/tecosaur/DataToolkit.jl/raw/main/docs/src/assets/logotype.svg]]
# [[https://git.tecosaur.net/assets/img/tree-gitea-themed.svg]]

Robust data management made simple: Introducing DataToolkit

Timothy Chapman

Friday, 07-28, 16:00–16:30 (US/Eastern), 32-123

* Ecosystem
:LOGBOOK:
CLOCK: [2023-07-15 Sat 21:30]--[2023-07-15 Sat 22:27] =>  0:57
CLOCK: [2023-07-15 Sat 14:17]--[2023-07-15 Sat 14:47] =>  0:30
:END:

** Package comparisons - General Utilities
\scriptsize
| Purpose    | Python        | R       | Julia                                  |
|------------+---------------+---------+----------------------------------------|
| /          | <>            | <>      | <>                                     |
| Plotting   | Matplotlib    | ggplot2 | [[https://github.com/JuliaPy/PyPlot.jl][PyPlot.jl]] / [[https://github.com/MakieOrg/Makie.jl][Makie.jl]] / [[https://gadflyjl.org/stable/][Gadfly.jl]] |
| Dataframes | Pandas/Polars | [[https://tibble.tidyverse.org/][tibble]]  | DataFrames.jl                          |

** Package comparisons - Biological File Formats

\scriptsize
| Purpose       | Python    | R         | Julia                                      |
|---------------+-----------+-----------+--------------------------------------------|
| /             | <>        | <>        | <>                                         |
| Sam/Bam files | [[https://biopython.org/wiki/SeqIO][Bio.SeqIO]] | [[https://bioconductor.org/packages/release/bioc/html/Rsamtools.html][Rsamtools]] | [[https://docs.juliahub.com/XAM/4JnDO/0.3.1/][XAM.jl]]                                     |
| Fastq files   | [[https://biopython.org/wiki/SeqIO][Bio.SeqIO]] | [[https://bioconductor.org/packages/release/bioc/html/ShortRead.html][ShortRead]] | [[https://github.com/BioJulia/FASTX.jl][FASTX.jl]]                                   |
| Variants/vcf  | [[https://github.com/jamescasbon/PyVCF][PyVCF]]     | [[https://knausb.github.io/vcfR_documentation/][vcfR]]      | [[https://github.com/BioJulia/GeneticVariation.jl][GeneticVariation.jl]] / [[https://github.com/rasmushenningsson/VariantCallFormat.jl][VariantCallFormat.jl]] |
|               | [[https://biopython.org/wiki/Phylo][Bio.Phylo]] |           | [[https://biojulia.dev/Phylogenies.jl/stable/][Phylogenies.jl]]                             |
|               | [[https://biopython.org/wiki/The_Biopython_Structural_Bioinformatics_FAQ][Bio.PDB]]   |           | [[https://biojulia.dev/BioStructures.jl/stable/][BioStructures.jl]]                           |
|               | [[https://biopython.org/wiki/Gene_predictions_to_protein_sequences][BCBio.GFF]] |           | [[https://github.com/BioJulia/GFF3.jl][GFF3.jl]]                                    |

*** :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:

- Gadfly - if you prefer Grammer of graphics

https://www.bioconductor.org/packages/stats/

** Package comparisons - Genomic Analysis

\tiny
| Purpose             | Python                       | R              | Julia                        |
|---------------------+------------------------------+----------------+------------------------------|
| /                   | <>                           | <>             | <>                           |
| Genomic Ranges      | [[https://github.com/pyranges/pyranges][pyranges]] / [[https://daler.github.io/pybedtools/][pybedtools]]        | [[https://bioconductor.org/packages/release/bioc/html/rtracklayer.html][rtracklayer]]    | [[https://docs.juliahub.com/GenomicFeatures/kSGNI/3.0.0/][GenomicFeatures.jl]]           |
| Genomic Ranges      |                              | [[https://bioconductor.org/packages/release/bioc/vignettes/GenomicRanges/inst/doc/GenomicRangesIntroduction.html][GenomicsRanges]] | [[https://biojulia.dev/GenomicFeatures.jl/stable/man/intervals/][Intervals]]                    |
| Blast               | Bio.Blast                    | [[https://github.com/drostlab/metablastr][metablastr]]     | [[https://docs.juliahub.com/BioTools/wwbVn/1.1.0/blast/][BioTools.jl]]                  |
| DNA/RNA/AA          | [[https://biopython.org/wiki/SeqIO][Bio.SeqIO]]                    |                | [[https://biojulia.dev/BioSequences.jl/stable/transforms/][BioSequences.jl]]              |
| Data Retrieval      | [[https://github.com/pyranges/pyranges_db][pyranges_\db]] / [[https://github.com/sebriois/biomart][biomart]] (api) | [[https://github.com/ropensci/biomartr][biomartr]]       | [[https://docs.juliahub.com/BioServices/nOcmO/0.4.1/man/eutils/][BioServices.jl]] / [[https://github.com/BioJulia/BioFetch.jl][BioFetch.jl]] |
| Genomic Annotations | [[https://github.com/pyranges/pyranges][pyranges]] / [[https://daler.github.io/pybedtools/][pybedtools]]        | [[https://bioconductor.org/packages/release/bioc/vignettes/GenomicRanges/inst/doc/GenomicRangesIntroduction.html][GenomicsRanges]] | [[https://docs.juliahub.com/GenomicAnnotations/ckOyU/0.3.2/][GenomicAnnotations.jl]]        |
| Population Genetics | [[https://biopython.org/wiki/PopGen][Bio.PopGen]]                   |                | [[https://github.com/BioJulia/PopGen.jl][PopGen.jl]]                    |

** What about when you can't replace popular packages?

#+beamer: \pause
- Working in Python & R is like buying a _house in DFW_
#+beamer: \pause
  - Downtown, constant re-development(pip, poetry, hatch, piptools, conda)
#+beamer: \pause
  - Compared to the suburbs where you need a car

#+beamer: \pause
- Urban Sprawl of Python & R packages
  - DESeq2/edgeR/seurat/scanpy
  - ggplot2


*** :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:

- Gotta give my PI credit for this one
- You're constantly getting new restaurants, there's plenty of public
  transportation
- But at least in the suburbs your favorite restaurant isn't getting torn down, hopefully there's less traffic.

** What about when you can't replace popular packages?

Options:
- [[https://github.com/JuliaInterop][JuliaInterop · GitHub]]
- [[https://juliainterop.github.io/RCall.jl/stable/gettingstarted/][RCall.jl]]
# FIXME PythonCall
- PythonCall.jl

- Calling commandline tools from Julia

*** :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:

- Also libraries for C/C++, Matlab and GNU Octave, Java, Fortran
- There is a Rust crate but it doesn't seem very active. Probably because Julia
came out in 2009, and Rust in 2015, so why would you reach for Rust if you're
going to write Julia anyways.

There is a Rust birds of a feather

** TODO JuliaInterop - RCall :ATTACH:
:PROPERTIES:
:ID:       7f2a99d1-01a5-4432-8fc9-d8d3caf043c8
:END:

#+begin_src julia
julia> using RCall
# type `$`
R> install.packages("ggplot2")
R> library(ggplot2)
R> data(diamonds)
R> ggplot(diamonds, aes(x=carat, y=price)) \
    + geom_point()
#+end_src

# TODO Reattach
#+attr_latex: :height 0.2\linewidth
[[https://www.juliafordatascience.com/content/images/size/w1600/2021/06/Screen-Shot-2021-06-09-at-3.22.19-PM.png]]

** PythonCall - Python

#+begin_src python
import scanpy as sc


def preprocessing(adata):
    # Perform preprocessing of a anndata object
    sc.pp.filter_cells(adata, min_genes=200)
    sc.pp.filter_genes(adata, min_cells=3)

    # Normalization and scaling:
    sc.pp.normalize_total(adata, target_sum=1e4)
    sc.pp.log1p(adata)
    x = adata.X
    data = tf.data.Dataset.from_tensor_slices((x, x))
    return data, x
#+end_src

** PythonCall - Julia
#+begin_src julia
using PythonCall

sc = pyimport("scanpy")

function preprocessing(adata)
    sc.pp.filter_cells(adata, min_genes=200)
    sc.pp.filter_genes(adata, min_cells=3)

    # Normalization and scaling:
    sc.pp.normalize_total(adata, target_sum=1e4)
    sc.pp.log1p(adata)

    x = pyconvert(Array{Float32}, adata.X)
    return [x, x], x
end
#+end_src

** PythonCall and Pycall are different

- Doesn't have to support as much legacy
  - PythonCall supports Julia 1.6.1+ and Python 3.7+
  - PyCall supports Julia 0.7+ and Python 2.7+.
- Uses CondaPkg by default
- You can use them both at the same time if you needed to for some reason

** Managing conda envs in Julia

#+begin_src julia
using Conda, RCall

Conda.add("bioconductor-deseq2", channel="bioconda", :rnaseq)
#+end_src

# ~ENV["CONDA_JL_USE_MINIFORGE"] = "1"~
# julia> using Conda
# julia> Conda.add("mamba")
# julia> ENV["CONDA_JL_CONDA_EXE"] = joinpath(Conda.ROOTENV, "bin", "mamba")
# pkg> build Conda

** TODO CondaPkg.jl

#+begin_src julia
julia> using CondaPkg
pkg> conda add_channel bioconda
pkg> conda add bioconductor-deseq2
#+end_src

~CondaPkg.toml~
#+begin_src toml
channels = ["conda-forge"]

[deps]
bioconductor-deseq2 = ""
#+end_src

** Calling commandline tools from Julia

#+begin_src julia
julia> mycommand = `echo hello`
`echo hello`

julia> typeof(mycommand)
Cmd

julia> run(mycommand);
hello
#+end_src

[[https://docs.julialang.org/en/v1/manual/running-external-programs/][Docs on Running External Programs]]
** Calling commandline tools from Julia
# TODO Convert this to a bioinformatics example?

\small
#+begin_src julia
julia> files = ["read_1.fastq", "read_2.fastq"]
2-element Vector{String}:
"read_1.fastq"
"read_2.fastq"

julia> `bwa mem $files`
`bwa mem 'read_1.fastq read_2.fastq'`
#+end_src

** TODO Plotting - IGV with Plotly.js :noexport:

#+begin_src julia
using Dash, DashBio

app = dash()

app.layout = dashbio_igv(
    id="genome-igv",
    genome="ce11"
)

run_server(app, "0.0.0.0", debug=true)

#+end_src
** TODO Plotting - BedGraphs - Example :noexport:

\small
#+begin_src bedgraph
track type=bedGraph name="BedGraph Format" description="BedGraph format" priority=20
chr19 59302000 59302300 -1.0
chr19 59302300 59302600 -0.75
chr19 59302600 59302900 -0.50
chr19 59302900 59303200 -0.25
chr19 59303200 59303500 0.0
chr19 59303500 59303800 0.25
chr19 59303800 59304100 0.50
chr19 59304100 59304400 0.75
#+end_src
** Packages plugging directly in Common packages

\small
#+begin_src julia :using DataFrames FileIO
using FileIO, BedgraphFiles, DataTables, IndexedTables, Gadfly

# Load into a DataTable
dt = DataTable(load("data.bedgraph"))

# Load into an IndexedTable
it = IndexedTable(load("data.bedgraph"))
# Plot directly with Gadfly
plot(load("data.bedgraph"), xmin=:leftposition, xmax=:rightposition, y=:value, Geom.bar)

load("data.bedgraph") |> @filter(_.chrom == "chr19") |> save("data-chr19.bedgraph")
#+end_src

# FIXME gadly and indexedtable are broken

** TODO BioJuliaDocs :ATTACH:
:PROPERTIES:
:ID:       0c04f270-6fe2-44c1-8127-a495684498e1
:END:

[[attachment:_20230726_180850screenshot.png]]

[[https://m-persic.github.io/BioJuliaDocs/dev/][BioJuliaDocs]]
* Julia in Workflows
** Running Julia in Snakemake

#+begin_src snakemake
from snakemake.remote import AUTO
iris = "https://raw.githubusercontent.com/scikit-learn/scikit-learn/1.0/sklearn/datasets/data/iris.csv"
rule calling_script:
    input:
        AUTO.remote(iris)
    output:
        "results/out.csv",
    container: "docker://julia"
    script:
        "bin/smk_script.jl"
#+end_src

\small
#+begin_quote
In the Julia script, a snakemake object is available, which can be accessed
similar to the Python case, with the only difference that you have to index from
1 instead of 0.
#+end_quote

** Running Julia in Snakemake - Inside the Julia script
# FIXME make this a subtitle

#+begin_src julia
import Pkg; Pkg.add(["CSV", "DataFrames"])

using CSV, DataFrames

df = DataFrame(CSV.File(snakemake.input[1], footerskip=50))
names(df)
CSV.write(snakemake.output[1], df)

do_something(snakemake.input[1], snakemake.output[2], snakemake.threads, snakemake.config["myparam"])
#+end_src

** TODO Handling package installs :noexport:
https://github.com/snakemake/snakemake/issues/2215

** Running Julia in Nextflow - Installing Packages to Julia Depot

[[https://apeltzer.github.io/post/03-julia-lang-nextflow/][Julia Lang, Docker & Nextflow | Personal Homepage of Alex Peltzer]]

#+begin_src nextflow
// nextflow.config
env {
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}
#+end_src


** Running Julia in Nextflow - The Nextflow script

#+begin_src nextflow
process shebang {
    container 'julia'

    input:
    path csv_file

    output:
    path "out.csv"

    """
    #!/usr/bin/env -S julia --startup-file=no

    using CSV, DataFrames
    df = DataFrame(CSV.File($csv_file, footerskip=50))
    CSV.write("out.csv", df)
    """
}
#+end_src

** Running Julia in Nextflow - The Nextflow script

\small
#+begin_src nextflow
process cli {
    container 'julia'

    input:
    path csv_file

    output:
    stdout

    """
    julia hello.jl $csv_file
    """
}
#+end_src

** Running Julia in Nextflow - The Julia script
#+begin_src julia
#!/usr/bin/env -S julia --color=yes --startup-file=no

println(PROGRAM_FILE);
abspath(PROGRAM_FILE) == @__FILE__

@show ARGS

for x in ARGS
    println(x)
end
#+end_src

- Move it to the ~bin/~ folder of the pipeline, and make it executable (~chmod +x bin\*.jl~)


*** :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:

- The ~--project=@.~ is the default
- But the way Nextflow works that doesn't get picked up
** TODO Handling package installs :noexport:

https://github.com/JuliaContainerization/SimpleContainerGenerator.jl
* Analysis Example

** Overlapping BED files
#+begin_src julia
# overlap of H3K27ac and P63 peaks identifies enhancer regions where p63 binds
using Downloads

if !isfile(raw"H3K27ac.consensus_peaks.bed")
    Downloads.download("https://utdallas.box.com/shared/static/y4glk8y8chjq5fuv6iowe6bjz1vovkr3.bed", "H3K27ac.consensus_peaks.bed")
    Downloads.download("https://utdallas.box.com/shared/static/y4glk8y8chjq5fuv6iowe6bjz1vovkr3.bed", "p63_4A4.consensus_peaks.bed")
end

using GenomicFeatures
using BED
#+end_src

** Overlapping BED files

#+begin_src julia
# Create an interval collection in memory.
h3k27ac_icol = open(BED.Reader, "H3K27ac.consensus_peaks.bed") do reader
    IntervalCollection(reader)
end

p63_icol = open(BED.Reader, "p63_4A4.consensus_peaks.bed") do reader
    IntervalCollection(reader)
end
#+end_src
** Overlapping BED files

#+begin_src julia
overlap_icol = eachoverlap(h3k27ac_icol, p63_icol)
first(overlap_icol)
overlaps = collect(overlap_icol)
overlaps
BED.Record(p63_icol)
#+end_src

** Overlapping BED files

#+begin_src julia
writer = BED.Writer(output)
expected_entries = BED.Record[]
for interval in open(BED.Reader, filename)
    write(writer, interval)
    push!(expected_entries, interval)
end
#+end_src

* Conclusion
** Where is Julia lacking?

- Creating binaries/CLIs
- But what about Rust?
  - Rust for tools
  - Julia for analysis

** Resources

- [[https://github.com/BioJulia/BioTutorials][GitHub - BioJulia/BioTutorials: Tutorial Notebooks of BioJulia]]
- [[https://m-persic.github.io/BioJuliaDocs/dev/][New Documenter.jl Docs]]!

*** Left :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
Slides
[[file:./images/slides-qr-code.png]]

*** Right :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
[[https:link.edmundmiller.dev][link.edmundmiller.dev]]
[[file:~/src/personal/edmundmiller-dev/static/presentations/2023-07-26/links_qr.png]]

