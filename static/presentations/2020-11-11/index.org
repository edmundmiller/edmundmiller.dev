:PROPERTIES:
:ID:       3d1e9b04-8196-48e7-abdf-6ca92f244020
:END:
#+TITLE: Fall Update
#+REVEAL_THEME: white
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: timestamp:nil
#+OPTIONS: reveal_title_slide:nil
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_HLEVEL: 2
#+REVEAL_PLUGINS: (highlight)

* nf-core modules

- A repository of reusable processes for common software
- Features:
  - Conda, singularity, and docker containers for each individual software
  - Testing through CI
  - Documentation
  
** Quick DSL 2 Introduction

- Nextflow DSL 2 Released in v20.07.1

#+begin_src nextflow
process INDEX {
  input:
    path transcriptome
  output:
    path 'index'
  script:
    """
    salmon index --threads $task.cpus -t $transcriptome -i index
    """
}
#+end_src

*** Main workflow

#+begin_src nextflow
include { INDEX; FASTQC; QUANT; MULTIQC } from './some/module/script.nf' 

read_pairs_ch = channel.fromFilePairs( params.reads)

workflow {
  INDEX( params.transcriptome )
  FASTQC( read_pairs_ch )
  QUANT( INDEX.out, read_pairs_ch )
  MULTIQC( QUANT.out.mix(FASTQC.out).collect(), multiqc_file )
}
#+end_src

*** Sub-workflows

#+begin_src nextflow
workflow RNASEQ {
  take:
    transcriptome
    read_pairs_ch
 
  main: 
    INDEX(transcriptome)
    FASTQC(read_pairs_ch)
    QUANT(INDEX.out, read_pairs_ch)

  emit: 
     QUANT.out.mix(FASTQC.out).collect()
}
#+end_src

** ~nf-tools~  
:PROPERTIES:
:ID:       f970195e-b931-4005-9fc0-04c3f642d0e3
:END:

[[attachment:_20201110_193826screenshot.png]]

** Use in a pipeline 

#+begin_src nextflow
#!/usr/bin/env nextflow

nextflow.enable.dsl = 2

include { FASTQC } from './modules/nf-core/software/fastqc/main' addParams( options: [:] )

workflow {
    FASTQC(SRA_DOWNLOAD.out.raw_reads)    
}
#+end_src
** Structure of a Module
#+begin_src sh
.
├── software
│   ├── SOFTWARE
│   │   └── TOOL
│   │       ├── functions.nf          ## Utility functions imported in main module script
│   │       ├── main.nf               ## Main module script
│   │       ├── meta.yml              ## Documentation for module, input, output, params, author
│   │       └── test
│   │           ├── input             ## Soft-link input test data from "tests/"
│   │           ├── main.nf           ## Minimal workflow to test module
│   │           ├── nextflow.config   ## Minimal config to test module
│   │           └── output            ## Upload output files from test for unit testing
#+end_src

* nf-core rnaseq dsl2 rewrite

- Rewritten by Harshil Patel
- The pipeline will now download raw fastq files via the ENA FTP 
- New DESeq2 script
- Testing on Ganymede with DRG data
- Data engineering vs Data Science
- [[https://nf-core-awsmegatests.s3-eu-west-1.amazonaws.com/rnaseq/results-c304bd4843174cdfa5a26395a99be62a40060c5d/MultiQC/multiqc_report.html][Example MultiQC Report]] 
  
** Example Samplesheet

#+begin_src csv
group,replicate,fastq_1,fastq_2,strandedness,patient_number,vertebra,side
44T11R,1,./fastq_75/44T11R.fastq.gz,,unstranded,44,T11,R
46T8L,1,./fastq_75/46T8L.fastq.gz,,unstranded,46,T8,L
42T7R,1,./fastq_75/42T7R.fastq.gz,,unstranded,42,T7,R
47T7R,1,./fastq_75/47T7R.fastq.gz,,unstranded,47,T7,R
...
#+end_src

* nf-core groseq rewrite
** Total Functional Score of Enhancer Elements (TFSEE) Model :ATTACH:
:PROPERTIES:
:ID:       6bd82124-5e3f-473b-8c98-14193e5da72a
:END:

[[attachment:_20201110_215035screenshot.png]]

** Highlights

- Dataset was cells from Human Embroynic Stem Cell to Pancreatic Endoderm
- Comparison between calling enhancers using ~GRO-seq~ data and ~ChIP-seq~ data
  + Can be used with a reduced number of data types for enhancer identification,
    it fails to identify additional subtype- or stage-specific drivers with
    reduced data input
  
*** TFSEE
:PROPERTIES:
:ID:       da3754c3-2982-428e-875d-85ad831b8b30
:END:

[[attachment:_20201110_221826screenshot.png]]

** Differences between TFSEE and Global transcriptional activity dynamics reveal functional enhancer RNAs

- bwa instead of bowtie2/STAR (dealt better with shorter reads)
- GROHMM instead of homer
  + Allowed them to use ±3kb instead of 1kb upstream and 10kb downstream
    
** Rewrite

- nf-core functionality
  + SRA Download
- Option between homer, GROHMM, or dREG (Danko lab's package to create an SVR
  model utilizing a GPU)
- Comparison between the three techniques

* Europa

- 12000+ core system focusing on High Throughput Computing with low barrier of entry
  + Rstudio, Jupyter, Matlab
  + Web browser terminal access
- Hiring a team of postdoc facilitators
- ask.ci knowledge base 
- nf-core config
- Practical Research Computing 